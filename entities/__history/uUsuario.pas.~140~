unit uUsuario;

interface
  uses
    uUsuario.intf, System.SysUtils,  uDependente, System.Generics.Collections, Vcl.ExtCtrls;

  type TUsuario = class(TInterfacedObject)
    private
    FUsuarioId      : Integer;
    FNome           : String;
    FEmail          : String;
    FDataNascimento : TDateTime;
    FAtivo          : Integer;
    FFoto           : TBytes;
    FDependentes   : TList<TDependente>;
  public
      constructor Create;
      destructor Destroy; override;

      function GetUsuarioId       : Integer;
      function GetNome            : String;
      function GetEmail           : String;
      function GetDataNascimento  : TDateTime;
      function GetAtivo           : Integer;
      function GetFoto            : TBytes;
      function GetDependentes     : TList<TDependente>;

      procedure Criar;
      procedure Deletar;
      procedure SetUsuarioId(const Value: Integer);
      procedure SetNome(const Value: String);
      procedure SetEmail(const Value: String);
      procedure SetDataNascimento(const Value: TDateTime);
      procedure SetAtivo(const Value: Integer);
      procedure SetFoto(const Value: TBytes);
      procedure AdicionarDependentes(const Value: TDependente);
      procedure SetaDadosUsuario(const Value: Integer);
      procedure ConverterBytes(AImage: TImage; AByteArray: TBytes);
      procedure CarregarImagemDeBytes(const AByteArray: TBytes; AImage: TImage);

      property UsuarioId      : Integer               read GetUsuarioId       write SetUsuarioId;
      property Nome           : String                read GetNome            write SetNome;
      property Email          : String                read GetEmail           write SetEmail;
      property Datanascimento : TDateTime             read GetDataNascimento  write SetDataNascimento;
      property Ativo          : Integer               read GetAtivo           write SetAtivo;
      property Foto           : TBytes                read GetFoto            write SetFoto;
      property Dependentes    : TList<TDependente>    read GetDependentes;
  end;

implementation

uses
  uUsuarioConexao, System.Classes, uUsuarioExceptions, System.RegularExpressions;

constructor TUsuario.Create;
begin
  FDependentes := TList<TDependente>.Create;
end;

destructor TUsuario.Destroy;
begin
  FDependentes.Free;
  DataModuleUsuario.ADOQueryUsuario.Close;
  inherited;
end;


function TUsuario.GetUsuarioID: Integer;
begin
  Result := FUsuarioID;
end;

function TUsuario.GetNome: String;
begin
  Result := FNome;
end;

function TUsuario.GetEmail: String;
begin
  Result := FEmail;
end;

function TUsuario.GetDataNascimento: TDateTime;
begin
  Result := FDataNascimento;
end;

function TUsuario.GetAtivo: Integer;
begin
  Result := FAtivo;
end;

function TUsuario.GetFoto: TBytes;
begin
  Result := FFoto;
end;

function TUsuario.GetDependentes: TList<TDependente>;
begin
  Result := FDependentes;
end;

procedure TUsuario.SetUsuarioId(const Value: Integer);
var Dependente: TDependente;
begin
  FusuarioId := Value;
  try
    Dependente := TDependente.Create(Value);
    FDependentes := Dependente.CarregarDependentes;
  finally
    Dependente.Destroy;
  end;
end;

procedure TUsuario.SetNome(const Value: String);
begin
  FNome := Value;
end;

procedure TUsuario.SetEmail(const Value: String);
var
  EmailRegex: TRegEx;
begin
  EmailRegex.Create('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}', [roIgnoreCase]);
  if not EmailRegex.IsMatch(Value) then
    raise EInvalidEmailException.Create('O e-mail fornecido não é válido.')
  else
    FEmail := Value;
end;


procedure TUsuario.SetDataNascimento(const Value: TDateTime);
begin
  if (Now - Value) <= 120 then
    raise EInvalidAgeException.Create('A idade fornecida é superior a 120 anos.')
  else
    FDataNascimento := Value;
end;

procedure TUsuario.SetAtivo(const Value: Integer);
begin
  FAtivo := Value;
end;

procedure TUsuario.SetFoto(const Value: TBytes);
begin
  if Length(Value) > 200 * 1024 then
    raise EFileSizeExceededException.Create('O tamanho da foto excede 200 KB.')
  else
    FFoto := Value;
end;

procedure TUsuario.AdicionarDependentes(const Value: TDependente);
begin
  FDependentes.Add(Value);
end;

procedure TUsuario.Criar;
begin
  with DataModuleUsuario.ADOQueryUsuario do
  begin
    Open;
    if UsuarioId > 0 then
    begin
      Parameters.ParamByName('UsuarioId').Value := UsuarioId;
      Edit;
    end
    else
      Insert;

    FieldByName('Nome').AsString              := Nome;
    FieldByName('DataNascimento').AsDateTime  := DataNascimento;
    FieldByName('Ativo').AsInteger            := Ativo;
    FieldByName('Foto').AsBytes               := Foto;
    FieldByName('Email').AsString             := Email;
    Post;
    UsuarioId :=  FieldByName('UsuarioId').AsInteger;
  end;
end;

procedure TUsuario.Deletar;
begin
  with DataModuleUsuario.ADOQueryUsuarioDelete do
  begin
    Parameters.ParamByName('UsuarioId').Value := UsuarioId;
    ExecSQL;
    Destroy;
  end;
end;

procedure TUsuario.ConverterBytes(AImage: TImage; AByteArray: TBytes);
  var
  Stream: TMemoryStream;
begin
  Stream := TMemoryStream.Create;
  try
    AImage.Picture.SaveToStream(Stream);
    SetLength(AByteArray, Stream.Size);
    Stream.Position := 0;
    Stream.Read(AByteArray[0], Stream.Size);
    Foto := AByteArray;
  finally
    Stream.Free;
  end;
end;

procedure TUsuario.SetaDadosUsuario(const Value: Integer);
begin
  With DataModuleUsuario.ADOQueryUsuario do
  begin
    Parameters.ParamByName('UsuarioId').Value := Value;
    Open;
    UsuarioId       := FieldByName('UsuarioId').AsInteger;
    Nome            := FieldByName('Nome').AsString;
    DataNascimento  := FieldByName('DataNascimento').AsDateTime;
    Ativo           := FieldByName('Ativo').AsInteger;
    Foto            := FieldByName('Foto').AsBytes;
    Email           := FieldByName('Email').AsString;
  end;
end;

procedure TUsuario.CarregarImagemDeBytes(const AByteArray: TBytes; AImage: TImage);
var
  Stream: TMemoryStream;
begin
  Stream := TMemoryStream.Create;
  try
    Stream.Write(AByteArray[0], Length(AByteArray));
    Stream.Position := 0;
    AImage.Picture.LoadFromStream(Stream);
  finally
    Stream.Free;
  end;
end;

end.
